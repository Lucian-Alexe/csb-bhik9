{"version":3,"sources":["App.js","index.js"],"names":["App","heightValue","getHeightValue","useState","weightValue","getWeightValue","result","getResult","system","setSystem","bmiBracket","setBmiBracket","bmiValue","Math","round","handleSystemChange","event","target","value","useEffect","className","type","id","checked","onChange","for","isNaN","size","e","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"uKAGe,SAASA,IACtB,MAAOC,EAAaC,GAAkBC,mBAAS,IACxCC,EAAaC,GAAkBF,mBAAS,IACxCG,EAAQC,GAAaJ,mBAAS,IAC9BK,EAAQC,GAAaN,mBAAS,WAC9BO,EAAYC,GAAiBR,mBAAS,QAE7C,SAASS,IACP,OACSL,EADM,WAAXC,EAEAK,KAAKC,MAAOV,EAAcH,EAAcA,EAAe,KAAU,GAIjEY,KAAKC,MAAOV,GAAeH,EAAcA,GAAgB,MAAQ,IAKvE,MAAMc,EAAsBC,IAC1BP,EAAUO,EAAMC,OAAOC,QAmBzB,OAPAC,qBAAU,KACY,IAAhBlB,GAAqC,IAAhBG,IATV,IAAXE,EAAqBK,EAAc,aACnCL,GAAU,KAAaK,EAAc,eAChCL,GAAU,MAAQA,EAAS,KAC3BK,EAAc,iBACdL,GAAU,MAAQA,GAAU,GAAWK,EAAc,cACrDL,GAAU,IAAWK,EAAc,SAM1CC,QAKF,sBAAKQ,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,UAAf,UACE,uBACEC,KAAK,QACLH,MAAM,SACNI,GAAG,eACHC,QAAoB,WAAXf,EACTgB,SAAUT,IACT,IACH,uBAAOU,IAAI,eAAX,oBACA,uBACEJ,KAAK,QACLH,MAAM,UACNI,GAAG,gBACHC,QAAoB,YAAXf,EACTgB,SAAUT,IACT,IACH,uBAAOU,IAAI,gBAAX,wBAGF,qBAAKL,UAAU,YAAf,SACE,sBAAKA,UAAU,SAAf,UACE,wDACA,6BAAKM,MAAMpB,IAAqB,YAAVA,EAAuB,IAAMA,IACnD,4BAAII,YAKV,qBAAKU,UAAU,gBAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,UACE,2CACA,4BAAe,WAAXZ,EAAsB,KAAO,cAEnC,uBACEU,MAAOd,EACPgB,UAAU,SACVO,KAAK,IACLH,SAAWI,GAAMvB,EAAeuB,EAAEX,OAAOC,YAG7C,sBAAKE,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,UACE,2CACA,4BAAe,WAAXZ,EAAsB,KAAO,cAEnC,uBACEU,MAAOjB,EACPmB,UAAU,SACVO,KAAK,IACLH,SAAWI,GAAM1B,EAAe0B,EAAEX,OAAOC,YAI7C,8BACE,wBAAQE,UAAU,SAASS,QAAS,IAAMjB,IAA1C,iCChGZ,MAAMkB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAClC,EAAD,MAEF8B,I","file":"static/js/main.b0029d4d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [heightValue, getHeightValue] = useState(0);\n  const [weightValue, getWeightValue] = useState(0);\n  const [result, getResult] = useState(0);\n  const [system, setSystem] = useState(\"Metric\");\n  const [bmiBracket, setBmiBracket] = useState(\"none\");\n\n  function bmiValue() {\n    if (system === \"Metric\") {\n      return getResult(\n        Math.round((weightValue / heightValue / heightValue) * 100000) / 10\n      );\n    } else {\n      return getResult(\n        Math.round((weightValue / (heightValue * heightValue)) * 7030) / 10\n      );\n    }\n  }\n\n  const handleSystemChange = (event) => {\n    setSystem(event.target.value);\n  };\n\n  const handleBmiBracket = () => {\n    if (result === 0) return setBmiBracket(\"No weight\");\n    if (result <= 18.5) return setBmiBracket(\"Underweight\");\n    else if (result <= 24.9 && result > 18.5)\n      return setBmiBracket(\"Normal weight\");\n    else if (result <= 29.9 && result >= 25) return setBmiBracket(\"Overweight\");\n    else if (result >= 30) return setBmiBracket(\"Obese\");\n  };\n\n  useEffect(() => {\n    if (heightValue !== 0 && weightValue !== 0) {\n      handleBmiBracket();\n      bmiValue();\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"TopWrapper\">\n        <div className=\"Toggles\">\n          <input\n            type=\"radio\"\n            value=\"Metric\"\n            id=\"MetricButton\"\n            checked={system === \"Metric\"}\n            onChange={handleSystemChange}\n          />{\" \"}\n          <label for=\"MetricButton\">Metric</label>\n          <input\n            type=\"radio\"\n            value=\"English\"\n            id=\"EnglishButton\"\n            checked={system === \"English\"}\n            onChange={handleSystemChange}\n          />{\" \"}\n          <label for=\"EnglishButton\">English</label>\n        </div>\n\n        <div className=\"WhiteCard\">\n          <div className=\"Result\">\n            <p>Your body mass index is</p>\n            <h1>{isNaN(result) || result == \"Infinity\" ? \"-\" : result}</h1>\n            <p>{bmiBracket}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"InputsWrapper\">\n        <div className=\"Inputs\">\n          <div className=\"InputsBox\">\n            <div className=\"InputsLabel\">\n              <label>Weight</label>\n              <p>{system === \"Metric\" ? \"kg\" : \"pounds\"}</p>\n            </div>\n            <input\n              value={weightValue}\n              className=\"weight\"\n              size=\"5\"\n              onChange={(e) => getWeightValue(e.target.value)}\n            ></input>\n          </div>\n          <div className=\"InputsBox\">\n            <div className=\"InputsLabel\">\n              <label>Height</label>\n              <p>{system === \"Metric\" ? \"cm\" : \"inches\"}</p>\n            </div>\n            <input\n              value={heightValue}\n              className=\"height\"\n              size=\"5\"\n              onChange={(e) => getHeightValue(e.target.value)}\n            ></input>\n          </div>\n\n          <div>\n            <button className=\"Button\" onClick={() => bmiValue()}>\n              Calculate\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}